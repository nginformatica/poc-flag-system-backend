import Core from './Core';
import type { ApiResponse, Entity, FeatureInstance, FeatureValidationReturn, FlagConstructorProps, IFlagSystem, IFlags, Method, PurgeFeatureReturn, PurgeFlagMethod, RelatedFlagReturn, UpdateFeatureVersionReturn, FeatureVersion, Priority, FeatureCollisionReturn } from './Types';
/**
 * Represents a Flag System for controlling access to features.
 * @typeparam Flag Type of system flags.
 * @typeparam Feature Type of features.
 * @typeparam FlagInterface Type of user and organization flags.
 */
declare class FlagSystem<Flag, Feature, FlagInterface extends IFlags<Flag>> extends Core<Flag, Feature, FlagInterface> implements IFlagSystem<Feature, Flag> {
    /**
     * Creates an instance of the FlagSystem class.
     * @param cb An object containing callback functions for the Flag System.
     * @param systemFlags An array of system flags.
     */
    constructor(props: FlagConstructorProps<Flag, Feature, FlagInterface>);
    /**
     * Determines whether the user is allowed to access the specified feature.
     * @param feature The feature to check.
     * @returns A promise that resolves with object containing a boolean
     * indicating whether the user is allowed to access the feature and the
     * version of the feature.
     */
    canUserAccessFeature(userId: string, feature: Feature): Promise<ApiResponse<FeatureValidationReturn>>;
    /**
     * Registers a flag with the provided features.
     * @param flag - The flag to register.
     * @param features - The features associated with the flag.
     * @returns - A promise that resolves when the flag has been registered.
     */
    registerFlag(flag: Flag, priority: Priority, features: Array<FeatureInstance<Feature>>): Promise<ApiResponse<Flag>>;
    /**
     * Updates the provided flag in the system and associates it with the
     * provided features.
     * @param flag - The flag to update.
     * @param features - The features to associate with the flag.
     * @param featureOperator - The method to used to handle the features
     * 'insert' - Inserts the features into the existing features associated
     * with the flag.
     * replace any existing features with the same name.
     * 'update' - Replaces the features associated with the flag.
     * @returns - A promise that resolves when the flag has been updated.
     */
    updateFlag(flag: Flag, priority: Priority, features: Array<FeatureInstance<Feature>>, featureOperator: Method): Promise<ApiResponse<Flag>>;
    /**
     * Finds all flags related to the provided feature.
     * @param feature - The feature to check.
     * @returns - A promise that resolves to an array of objects containing the
     * flag and the version of the feature.
     */
    findFlagsRelatedToFeature(feature: Feature): Promise<ApiResponse<Array<RelatedFlagReturn<Flag>>>>;
    /**
     * Finds all features related to the provided flag.
     * @param flag - The flag to check.
     * @returns - A promise that resolves to an array of objects containing the
     * feature and the version of the feature.
     */
    findFeaturesRelatedToFlag(flag: Flag): Promise<ApiResponse<Array<FeatureInstance<Feature>>>>;
    /**
     * Updates a feature version in a flag.
     * @param feature - The feature to update.
     * @param version - The version to update.
     * @param flag - The flag to update.
     * @returns A promise that resolves with an object containing the updated
     * feature/version and the updated flag.
     */
    updateFeatureVersion(feature: Feature, version: FeatureVersion, flag: Flag): Promise<ApiResponse<UpdateFeatureVersionReturn<Feature, Flag>>>;
    /**
     * Finds all features that are not associated with any flag.
     * @param sysFeatures - The features to check.
     * @returns - A promise that resolves to an array of features that are not
     * associated with any flag.
     */
    findFloatingFeatures(sysFeatures: Feature[]): Promise<ApiResponse<Feature[]>>;
    /**
     * Finds all flags that are not associated with any feature.
     * @returns - A promise that resolves to an array of flags that are not
     * associated with any feature.
     */
    findFloatingFlags(sysFlags: Flag[]): Promise<ApiResponse<Flag[]>>;
    /**
     * Purges a feature from the system.
     * @param feature - The feature to purge. Can be an array of features or a
     * single feature.
     * @returns - A promise that resolves with an object containing the updated
     * flags and the removed flags.
     */
    purgeFeature(feature: Feature | Feature[]): Promise<ApiResponse<PurgeFeatureReturn<Flag>>>;
    /**
     * Purges a flag from the system.
     * @param flag - The flag to purge. Can be an array of flags or a single
     * flag.
     * @returns - A promise that resolves when the flag has been purged.
     */
    purgeFlag(flag: Flag | Flag[], method: PurgeFlagMethod): Promise<ApiResponse<Flag[]>>;
    /**
     * Flags an entity.
     * @param entityId - The id of the entity to flag.
     * @param flag - The flag to flag the user with. Can be an array of flags
     * or a single flag.
     * @param entity - The entity to flag. Can be 'user' or 'organization'.
     * @param method - The method to use when flagging the user. Can be 'insert'
     * or 'update'.
     * @returns - A promise that resolves when the entity has been flagged with
     * the new flag(s).
     */
    flagEntity(entityId: string, flag: Flag | Flag[], entity: Entity, method: Method): Promise<ApiResponse<Flag[]>>;
    /**
     * Dump the current state of the system.
     * @returns - A promise that resolves with the current state of the system.
     */
    dump(): Promise<unknown[][]>;
    /**
     * Finds any feature collisions in the system.
     * @returns - A promise that resolves to an array of feature instances that
     * are associated with more than one flag.
     */
    findAnyFeatureCollision(): Promise<ApiResponse<Array<FeatureCollisionReturn<Feature, Flag>>>>;
}
export default FlagSystem;
