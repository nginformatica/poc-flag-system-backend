/**
 * Represents a feature collision.
 * @template Flag The type of the flag used in the system.
 */
export interface FlagWithPriority<Flag> {
    flag: Flag;
    priority: Priority;
}
/**
 * Represents a feature collision return.
 * @template Feature The type of feature that can be associated with a flag.
 * @template Flag The type of the flag used in the system.
 */
export interface FeatureCollisionReturn<Feature, Flag> {
    feature: Feature;
    flags: Array<FlagWithPriority<Flag>>;
}
/**
 * Represents a response from the Flag System.
 */
export interface ApiResponse<T> {
    res?: T;
    debug?: unknown[][];
    error?: string;
}
/**
 * Represents the return from a purge feature call.
 */
export interface PurgeFeatureReturn<Flag> {
    updatedFlags: Flag[];
    removedFlags: Flag[];
}
/**
 * Represents the return from a update feature version call.
 */
export interface UpdateFeatureVersionReturn<Feature, Flag> {
    feature: Feature;
    version: FeatureVersion;
    flag: Flag;
}
/**
 * Represents an entity that can be flagged.
 */
export type Entity = 'user' | 'organization';
/**
 * Represents a method used to create or update a flag.
 */
export type Method = 'insert' | 'update';
/**
 * Represents a method used to purge a feature.
 * @safe will only purge the flag if it is not associated with any user or
 * organization flags.
 * @unsafe will purge the flag regardless of whether it is associated with any
 * user or organization flags.
 * @force will purge the flag regardless of whether it is associated with any
 * user or organization flags and will also purge all user and organization
 * flags associated with.
 */
export type PurgeFlagMethod = 'safe' | 'unsafe' | 'force';
/**
 * Represents a feature version.
 */
export declare enum FeatureVersion {
    Stable = "STABLE",
    Development = "DEVELOPMENT",
    NotAvailable = "NOT_AVAILABLE",
    FallBack = "FALL_BACK"
}
/**
 * Represents a feature version.
 */
export interface IVersion {
    version: FeatureVersion;
}
/**
 * Represents a return type for a feature related flag
 * @template Flag The type of the flag used in the system.
 */
export interface RelatedFlagReturn<Flag> extends IVersion {
    flag: Flag;
}
/**
 * Represents a feature instance.
 * @template Feature The type of the feature.
 */
export interface FeatureInstance<Feature> extends IVersion {
    feature: Feature;
}
/**
 * Represents return type for feature validation.
 */
export interface FeatureValidationReturn extends IVersion {
    available: boolean;
}
/**
 * Represents a flag priority.
 */
export type Priority = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
/**
Represents the result of a flag and its associated features.
@template Flag The type of the flag used in the system.
@template Feature The type of feature that can be associated with a flag.
*/
export interface FlagReturn<Flag, Feature> {
    flag: Flag;
    priority: Priority;
    features: Array<FeatureInstance<Feature>>;
}
/**
 * Represents a flag system interface combined with id and name.
 * @template Interface The type of the interface.
 */
export interface InterfaceWithId<Interface> {
    id: string;
    name: string;
    entity: Entity;
    interface: Interface;
}
/**
 * Represents the constructor properties for a flag system.
 * @template Flag The type of the flag used in the system.
 * @template Feature The type of feature that can be associated with a flag.
 * @template FlagInterface The type of flags in the system.
 */
export interface FlagConstructorProps<Flag, Feature, FlagInterface> {
    /**
     * Callbacks for interacting with the flag system.
     */
    cb: FlagSysCallbacks<Flag, Feature, FlagInterface>;
    /**
     * The system flags to use.
     */
    systemFlags?: Flag[];
}
/**
 * Represents callbacks for a flag system.
 * @template Flag The type of the flag used in the system.
 * @template Feature The type of feature that can be associated with a flag.
 */
export interface FlagSysCallbacks<Flag, Feature, Interface> {
    /**
     * Callback for creating a new flag in the system and associating it with
     * the provided features.
     * @param flag The flag to create.
     * @param features An array of features to associate with the flag.
     * @returns A promise that resolves with the created flag.
     */
    createFlag?: (flag: Flag, priority: Priority, features: Array<FeatureInstance<Feature>>) => Promise<Flag>;
    /**
     * Callback for updating a flag in the system and associating it with the
     * provided features.
     * @param flag The flag to update.
     * @param features An array of features to associate with the flag.
     * @returns A promise that resolves with the updated flag.
     */
    updateFlag?: (flag: Flag, priority: Priority, features: Array<FeatureInstance<Feature>>) => Promise<Flag>;
    /**
     * Callback for removing a flag from the system.
     * @param flag The flag to remove.
     * @returns A promise that resolves with the removed flag.
     */
    removeFlag?: (flag: Flag) => Promise<Flag>;
    /**
     * Callback for getting all flags in the system.
     * @returns A promise that resolves with an array of flags.
     */
    getFlags(): Promise<Array<FlagReturn<Flag, Feature>>>;
    /**
     * Callback for getting all users flags in the system.
     * @returns A promise that resolves with an array of flags.
     */
    getAllUsersInterfaces?: () => Promise<Array<InterfaceWithId<Interface>>>;
    /**
     * Callback for getting all organizations flags in the system.
     * @returns A promise that resolves with an array of flags.
     */
    getAllOrganizationsInterfaces?: () => Promise<Array<InterfaceWithId<Interface>>>;
    /**
     * Callback for getting a user interface.
     * @param userId Id of the user to get the interface for.
     * @returns A promise that resolves with the user interface.
     */
    getUserInterface?: (userId: string) => Promise<Interface>;
    /**
     * Callback for getting a organization interface.
     * @param organizationId Id of the organization to get the interface for.
     * @returns A promise that resolves with the organization interface.
     */
    getOrganizationInterface?: (organizationId: string) => Promise<Interface>;
    /**
     * Callback for getting a organization interface.
     * @param userId Id of the user to get the organization interface for.
     * @returns A promise that resolves with the organization interface.
     */
    getOrganizationInterfaceFromUserId?: (userId: string) => Promise<Interface>;
    /**
     * Callback for flagging a user.
     * @param userId Id of the user to flag.
     * @param flagInterface The interface to use for flagging the user.
     * @returns A promise that resolves with the updated flags.
     */
    flagUser?: (userId: string, flagInterface: Interface) => Promise<Flag[]>;
    /**
     * Callback for flagging a organization.
     * @param organizationId Id of the organization to flag.
     * @param flagInterface Interface to use for flagging the organization.
     * @returns A promise that resolves with the updated flags.
     */
    flagOrganization?: (organizationId: string, flagInterface: Interface) => Promise<Flag[]>;
}
/**
 * Represents a collection of flags.
 * @template Flag The type of flags in the collection.
 */
export interface IFlags<Flag> {
    /**
     * An array of flags.
     */
    flags: Flag[];
    /**
     * A dictionary of settings associated with the flags.
     */
    settings: Record<string, boolean>;
}
/**
 * Represents a flag system.
 * @template Feature The type of flags in the system.
 * @template Flag The type of the flag used in the system.
 */
export interface IFlagSystem<Feature, Flag> {
    /**
     * Determines if the user can access the provided feature.
     * @param feature The feature to check access for.
     * @returns A promise that resolves with a boolean indicating whether the
     * user can access the feature.
     */
    canUserAccessFeature: (userId: string, feature: Feature) => Promise<ApiResponse<FeatureValidationReturn>>;
    /**
     * Registers a new flag in the system and associates it with the provided
     * features.
     * @param flag The flag to register.
     * @param features An array of features to associate with the flag.
     * @returns A promise that resolves when the flag has been registered.
     */
    registerFlag: (flag: Flag, priority: Priority, features: Array<FeatureInstance<Feature>>) => Promise<ApiResponse<Flag>>;
    /**
     * Updates the provided flag in the system and associates it with the
     * provided features.
     * @param flag The flag to update.
     * @param features An array of features to associate with the flag.
     * @returns A promise that resolves when the flag has been updated.
     */
    updateFlag: (flag: Flag, priority: Priority, features: Array<FeatureInstance<Feature>>, method: Method) => Promise<ApiResponse<Flag>>;
    /**
     * Purge the provided feature from the system.
     * @param feature The feature to purge. Can be a single feature or an array
     * of features.
     * @returns A promise that resolves when the flag has been removed.
     */
    purgeFeature: (feature: Feature | Feature[]) => Promise<ApiResponse<PurgeFeatureReturn<Flag>>>;
    /**
     * Gets all the flags associated with the provided feature.
     * @param feature The feature to get flags for.
     * @returns A promise that resolves with an array of flags associated with
     * the feature.
     */
    findFlagsRelatedToFeature: (feature: Feature) => Promise<ApiResponse<Array<RelatedFlagReturn<Flag>>>>;
    flagEntity: (userId: string, flag: Flag | Flag[], entity: Entity, method: Method) => Promise<ApiResponse<Flag[]>>;
}
